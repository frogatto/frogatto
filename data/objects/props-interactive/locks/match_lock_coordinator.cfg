//This object is automatically spawned by "sound-sources" in-game; it doesn't need to manually be placed by people editing levels, nor does it need to be spawned by object-writers who are using sound-sources to give in-game objects a tracked sound.  This coordinates multiple instances of a single sound so that only one instance of them plays at a given time, passing control to a new one if one of them is going to be removed.

{
id: "match_lock_coordinator",
is_strict: true,
hidden_in_game: true,
always_active: true,
prototype: ["pullable"],

properties: {
	add: "def(obj match_lock lock) -> commands [
		add(self.monitoring, [lock]),
		set(lock._lock_coordinator, self),
		
		fire_event(me,'do_setup')
	]",
	remove: "def(obj match_lock lock) -> commands [
		set(self.monitoring, newMonitoring),
		set(lock._lock_coordinator, null),
	] where newMonitoring = filter(self.monitoring, value!=lock)",
	
	
	activate: "def(obj match_lock lock) -> commands [
		if(prospective_lock = null, [set(prospective_lock, lock),sound('match-lock-change.wav'), lock.flash],
			[set(prospective_lock, null), //we're clearing this variable regardless - if it matches, its going in 'activated', if it doesn't, it's just getting removed
			if(prospective_lock.sigil_type = lock.sigil_type,
				[sound('match-lock-pair.wav'), lock.flash, prospective_lock.flash, add(activated, [lock]), add(activated, [prospective_lock]), schedule(1, fire_event(me,'test_set'))],
				[sound('match-lock-deactivate.wav')]
			)]
		),
	]",

	is_lock_active: "def(obj match_lock lock) -> bool (lock = prospective_lock) or (lock in activated)",

	setup_list_of_locks: "commands :: [
		if( size(monitoring) = size(filter(level.chars, value is obj match_lock and value.event = me.event)),
			[
				[map( monitoring , value.set_sigil_value( replacement_sigils[index] )), store_sigil_order(replacement_sigils)]
					where replacement_sigils = if(get_sigil_order != null, get_sigil_order, new_sigils)
						where new_sigils = shuffle(map(offset_range(size(monitoring)/2), value) * 2)
							where offset_range = def(range_size) map(range(range_size), (index+start_point)%16)
								where start_point = 1d16,
				if(_event != default_event_state, map( monitoring, add(activated, [value])))
			]
		),
	]",
	

#-------------------------- vars --------------------------#
	prospective_lock: { type: "obj match_lock|null", default: null },  //when you unlock a pair, you start by activating one (which gets stored here), and then activating another.
	activated: { type: "[obj match_lock]", default: [] },
		
	monitoring: { type: "[obj match_lock]", default: [], persistent: false },
	
	
#-------------------------- pullable overrides --------------------------#
	store_sigil_order: "def([int] new_order) -> commands set(level.player.custom_storage[sigil_order_event_name], new_order)",
	get_sigil_order: "[int]|null <- level.player.custom_storage[sigil_order_event_name]",


	sigil_order_event_name: "event + '_sigil_order'",
	event: { type: "string", dynamic_initialization: true },

	default_event_state: { type: "int", dynamic_initialization: true },

	visually_turn_on: "commands :: [play_switch_sound_guarded]",
	visually_turn_off: "commands :: [play_switch_sound_guarded]", 
	
	event_is_irreversible: "bool :: true",
},

on_do_setup: "setup_list_of_locks",

on_test_set: "if(size(activated) = size(monitoring), [do_toggle, sound('match-lock-success.ogg'), map(monitoring, value.big_flash)])",


animation: [
{
	"@base": true,
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
{
	id: "normal",
},
{
	id: "pushed",
}
],
}

