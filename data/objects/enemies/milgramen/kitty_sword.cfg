{
id: "kitty_sword",
prototype: ["hittable"],
is_strict: true,
always_active: true,
hitpoints: 10000000,   #bogus, gets reset in on_create
solid_area: [13,9,33,34],
solid_dimensions: ["common"],
traction: 1000,
traction_in_air: 000,
friction: 1000,
editor_info: {
	category: "enemies, milgramen",
},

properties: {
	consecutive_knives_thrown: {type:"int", init:"0"},
	


#-------------------------- hittable metadata --------------------------#
	title: "~Ralph~",
	description: "~A soldier eager to surpass the call of duty through sheer force of aggression.~",
	taste: "~A wool sweater with a thin coat of whey protein.~",

#-------------------------- hittable overrides --------------------------#
	facing_player: "if(level.player.x < x, facing < 0, facing > 0)",
	damage_type:  "if( animation = 'lunge_attack', enum stab, enum slash)",
	flinch_threshold: 40,
	hurt_velocity_x: 0,
	hurt_velocity_y: 0,
	team: "'evil'",
	taxonomy: "TaxonomyType :: enum neutral",

	attack_damage: "if(higher_difficulty,2,1)",
	posthit_invicibility_period: "100",
	springiness: "200",
	spring_amount: "1400",
	bounce_roundness: "200",
	points_value: "500",
	is_a_boss: { default:true },


	play_object_specific_pain_vocalization: "def(DamageType damage_type, damage_amount) -> commands play_sound__falloff('cat-growl-ornery.wav')",

#-------------------------- combat decisions --------------------------#
	is_player_at_a_good_knifethrow_position: "(
		consecutive_knives_thrown < 3 and
		(p_angle > 40) and
		(p_angle < 95) and
		(lib.math.length(me,level.player) > 300) and
		abs(level.player.mid_x - me.mid_x) > 300
	) where p_angle = abs(lib.math.angle(me,level.player) + 90)",

	is_past_player: "bool :: (sign(mid_x - level.player.mid_x) = me.facing)",
	is_near_player: "bool :: abs(level.player.mid_x - mid_x) < 200",

	energize_duration: "if(higher_difficulty,20,80)",
		

#-------------------------- attack logic --------------------------#
	spin_attack_anims: "['enter_spin_attack', 'leave_spin_attack', 'spin_attack']",
	lunge_attack_anims: "['lunge_attack', 'lunge_stuck', 'lunge_unstuck']",
	//jump_attack_anims: ['enter_prepare_jump', 'prepare_jump']
	


	player_too_close: "(lib.math.length(me,level.player) < 120)",

	begin_spin_attack: "[
		set(consecutive_knives_thrown,0),
		animation('enter_spin_attack')
	]",


	knife_offset: "def(decimal angle_offset) -> {x: decimal, y: decimal}
		{
			x: mid_x + offset[0],
			y: mid_y + offset[1]
		} where offset = orbit(0, 0, self.rotate - 90 + angle_offset, mid_y-10-y)",

	knife_speed: "700",

	knife_vel: "def(decimal angle_offset) -> {x: decimal, y: decimal}
		{
			x: knife_speed * cos(angle_offset + self.rotate - 90),
			y: knife_speed * sin(angle_offset + self.rotate - 90)
		}",

	spawn_individual_knife: "def(decimal angle_offset) -> commands
		spawn(
			'${type}.throwing_knife',
			knife_offset(angle_offset).x,
			knife_offset(angle_offset).y,
			{
				rotate: angle_offset,
				velocity_x: knife_vel(angle_offset).x,
				velocity_y: knife_vel(angle_offset).y
			}
		)",

	fire_knives: "[
		play_sound__falloff('weapon-swing-lightest'),
		spawn_individual_knife(-90 * facing),
		spawn_individual_knife(-70 * facing),
		spawn_individual_knife(-50 * facing),
		set(consecutive_knives_thrown,consecutive_knives_thrown+1)
	]",

	
#-------------------------- vars --------------------------#
	_began_energizing: { type: "int", default: 0, persistent: false },
	_can_attack_at: { type: "int", default: 0, persistent: false },
	_spin_counter: { type: "int", default: 3, persistent: false },
	_stuck_count: { type: "int", default: 0, persistent: false },
	_last_played_spin_sound: { type: "int", default: 0, persistent: false },
	_last_started_lunge_attack: { type: "int", default: 0, persistent: false }, 
},

on_create: "[set_max_hitpoints({casual: 200 * 4, challenging: 200 * 7})]",

on_there_is_a_guy_aiming_a_knife_right_at_you: "play_sound__falloff('knife-brandish1.wav')",

on_bounced_on: "if(animation in ['lunge_unstuck', 'lunge_stuck'],
					[get_hit_sourceless(enum impact,200), animation('spring'),sound_falloff('kitty-squish.wav')])",


on_collide_side: "if(arg.collide_with = level.player,
	/*
		Make it so if we collide with the player we immediately jump/attack.
		This ensures the kitty can't simply get stuck between the player and a wall
	*/
	if(not animation in spin_attack_anims,
		[set(velocity_x, 0), begin_spin_attack]
	),
	[
		if(animation = 'lunge_attack' and (not arg.collide_with),
			[
				animation('lunge_stuck'),
				sound('sword-embed-in-wall.wav',0.6),
				add(x,-50*facing),
				set(velocity_x,0),
				set(_stuck_count, 0)
			]
		),
		if(not (animation in spin_attack_anims + lunge_attack_anims),
			[
				set(facing, -facing),
				animation('turn'),
				set(velocity_x, 0)
			]
		)
	]
)",

on_end_hurt_anim: "animation('stand')",


#-------------------------- spin attack handling --------------------------#
on_end_spin_attack_anim: "if(_spin_counter > 0,
	[
		add(_spin_counter, -1),
		animation('spin_attack')
	],
	if(lib.math.length(me,level.player) < 200, 
		if(_spin_counter < -3,
			[
				set(_spin_counter, 0),
				animation('spin_attack'),
				set(velocity_y, -2000)
			],	
			[
				add(_spin_counter, -1),
				animation('spin_attack')
			]
		),
		[
			animation('leave_spin_attack'),
			set(_spin_counter, 6),
			set(_can_attack_at, cycle+50)
		]
	)
)",

on_end_enter_spin_attack_anim: "animation('spin_attack')",

on_end_leave_spin_attack_anim: "animation('walk')",

on_process_spin_attack: "if(is_standing, add(velocity_x, sin(cycle*5)*110))",


#-------------------------- primary mode switching --------------------------#
on_end_walk_anim: "if((not facing_player),
  if(abs(level.player.mid_x - mid_x) < 800, set(facing, -facing)),

  if(cycle > _can_attack_at and abs(level.player.mid_x - mid_x) < (300 + 1d200),

   if((1d4 = 1) or (abs(level.player.y - y) > 50),
    [animation('enter_prepare_jump'),play_sound__falloff('cat-hiss.wav'),set(_began_energizing,cycle),set(consecutive_knives_thrown,0)],
    if( (1d5 = 5 and consecutive_knives_thrown < 4) or (is_player_at_a_good_knifethrow_position and consecutive_knives_thrown < 4),
		[if(facing_player, set(facing, -facing)), animation('knife_toss')],
		[animation('prepare_lunge'),play_sound__falloff('cat-hiss.wav'),set(_began_energizing,cycle)]
	)
	),
if(distance_to_cliff < 80, [set(facing, -facing), animation('turn')], animation('walk'))))",


#-------------------------- knife-throw attack handling --------------------------#
on_end_knife_toss_anim: "animation('walk')",
on_release_knives: "fire_knives",


#-------------------------- jump attack handling --------------------------#
on_end_enter_prepare_jump_anim: "animation('prepare_jump')",

on_end_prepare_jump_anim: "if(cycle - _began_energizing > energize_duration,
	fire_event('initiate_jump'),
	animation('prepare_jump')
)",

on_initiate_jump: "[
	animation('jump'),
	if(level.player.x > mid_x,
		facing(1),
		facing(-1)
	),
	set(velocity_x, (level.player.mid_x - mid_x)*4),
	if(level.player.y > y2 and is_standing_on_platform,
		[
			set(fall_through_platforms, 20),
			set(velocity_y, 0)
		],
		if(mid_y - level.player.mid_y > 200,
			[set(velocity_y, -2400)]
		)
	)
]",

on_process_jump: "if(lib.math.length(me,level.player) < 90,
	begin_spin_attack,
	if(is_standing, animation('stand'))
)",


#-------------------------- lunge attack handling --------------------------#
on_end_lunge_anim: "animation('lunge_attack')",
on_end_prepare_lunge_anim: "if(cycle - _began_energizing > energize_duration,
	[
		animation('lunge'),
		play_sound__falloff('weapon-swing-medium'),
		set(consecutive_knives_thrown,0),
		set(_last_started_lunge_attack, level.cycle),
	],
	animation('prepare_lunge')
)",

on_end_lunge_stuck_anim: "if(_stuck_count > 4,
	animation('lunge_unstuck'),
	[
		animation('lunge_stuck'),
		add(_stuck_count, 1)
	]
)",
on_end_lunge_unstuck_anim: "animation('stand')",
on_process_lunge_attack: "
	if( level.cycle > _last_started_lunge_attack + 200,  /*is_past_player and (not is_near_player),*/
		animation('walk'),
		animation('lunge_attack')
	)",


#-------------------------- general handling --------------------------#
on_end_spring_anim: "animation('stand')",
on_end_stand_anim: "if(is_standing, animation('walk'), animation('stand'))",
on_end_turn_anim: "animation('walk')",

on_enter_water: "force_death()",



#-------------------------- triggers for getting too close --------------------------#
on_process_walk: "if(player_too_close, begin_spin_attack)",
on_process_prepare_lunge: "if(player_too_close, begin_spin_attack)",
on_process_prepare_jump: "if(player_too_close, begin_spin_attack)",

#-------------------------- sound cues --------------------------#
on_swordpull: "play_sound__falloff('sword-pull')",
on_backpack_rustle: "play_sound__falloff('backpack-rustle')",
on_spin_sound: "if(cycle - _last_played_spin_sound > 30, [set(_last_played_spin_sound, cycle), play_sound__falloff('sword-flurry.wav')])",


//,sound('weapon-swing-medium'+1d7+'.wav')                     
animation: [
	{
		"@base": true,
		image: "enemies/kitty-sword.png",
		pad: 3,
		body_area: "all",
		accel_x: 0,
		accel_y: 80,
	},
	{
		id: "stand",
		duration: 6,
		frames: 3,
		reverse: true,
		rect: [1,1,41,36],
		duplicates: 10,
	},

	#blink variation of standing
	{
		id: "stand",
		duration: 6,
		frames: 3,
		reverse: true,
		rect: [133,1,173,36],
	},
	{
		id: "turn",
		duration: 2,
		frames: 1,
		frames_per_row: 1,
		rect: [1,1,41,36],
	},
	{
		accel_x: 300,
		id: "walk",
		frames: 4,
		duration: 6,
		events: "0:12:footfall",
		rect: [295,41,332,76],
	},
	{
		id: "spring",
		duration: 2,
		frames: 5,
		rect: [1,40,51,75],
		reverse: true,
	},
	{
		id: "hurt",
		duration: 18,
		frames: 1,
		rect: [1,1,41,36],
	},
	{
		id: "prepare_lunge",
		duration: 2,
		frames: 3,
		frames_per_row: 3,
		rect: [1,79,41,114],
	},
	{
		accel_x: 2800,
		id: "lunge",
		duration: 3,
		frames: 3,
		rect: [133,79,173,114],
	},
	{
		accel_x: 2800,
		id: "lunge_attack",
		attack_area: [12,0,40,34],
		duration: 6,
		frames: 3,
		rect: [1,118,55,153],
	},
	{
		id: "lunge_stuck",
		duration: 5,
		frames: 3,
		solid_area: [10,9,30,34],
		rect: [1,157,55,192],
		events: "14:swordpull"
	},
	{
		id: "jump",
		duration: 10,
		frames: 3,
		events: "3:backpack_rustle",
		rect: [1,198,41,251],
		solid_area: [13,29,33,54],
		velocity_y: -1600,
	},
	{
		id: "enter_prepare_jump",
		duration: 3,
		frames: 4,
		rect: [1,1,41,49],
		image: "enemies/kitty-sword2.png",
	},
	{
		id: "prepare_jump",
		duration: 2,
		frames: 2,
		rect: [207,242,247,290],
	},
	{
		id: "enter_spin_attack",
		attack_area: "all",
		duration: 2,
		frames: 4,
		rect: [1,1,41,49],
		image: "enemies/kitty-sword2.png",
	},
	{
		id: "leave_spin_attack",
		play_backwards: true,
		attack_area: "all",
		duration: 3,
		frames: 4,
		rect: [1,1,41,49],
		image: "enemies/kitty-sword2.png",
	},
	{
		id: "spin_attack",
		attack_area: "all",
		duration: 2,
		frames: 8,
		frames_per_row: 4,
		rect: [1,53,78,97],
		solid_area: [32,9,52,34],  //+19, +0
		events: "2:spin_sound",
		image: "enemies/kitty-sword2.png",
	},
	{
		id: "lunge_unstuck",
		duration: 10,
		frames: 1,
		solid_area: [10,10,30,35],
		rect: [181,157,235,192],
	},
	{
		id: "knife_toss",
		attack_area: "all",
		duration: 4,
		frames: 6,
		rect: [1,149,41,190],
		events: "4:there_is_a_guy_aiming_a_knife_right_at_you, 19:release_knives",
		image: "enemies/kitty-sword2.png",
	},
],
object_type: [
	{
		id: "throwing_knife",
		dies_on_inactive: true,
		object_level_collisions: true,
		solid_dimensions: ["player"],
		prototype: ["shot"],
		properties: {
			attack_damage: "if(higher_difficulty,2,1)",
			damage_type: "enum stab",
			
		},
		timer_frequency: 200,
		on_collide_level: "[play_sound__falloff('collide-knife.wav'),force_death()]",
		on_timer: "force_death()",
		animation: [
			{
				image: "enemies/kitty-sword2.png",
				attack_area: "all",
				accel_y: 00,
				pad: 3,
				id: "normal",
				rect: [177,1,197,21],
				frames: 1,
				duration: -1,
			},
		],
	},
]
}
